
trigger:
  branches:
    include:
    - master
  tags:
    include:
    - v*

variables:
  isGitHubTag: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/v')]

stages:
  - stage: Build
    jobs: 
    - job: package
      condition: ne(variables['isGitHubTag'], 'true')
      pool:
        vmImage: 'ubuntu-16.04'
      steps:
      - checkout: self
      - task: DownloadSecureFile@1
        name: settingsSecurityXml
        displayName: 'Download maven security settings file'
        inputs:
          secureFile: 'settings-security.xml'
      - task: DownloadSecureFile@1
        name: settingsXml
        displayName: 'Download maven settings file'
        inputs:
          secureFile: 'settings.xml'
      - task: DownloadSecureFile@1
        name: key
        displayName: 'Download private key file'
        inputs:
          secureFile: 'moris.private.asc'
      - task: DownloadSecureFile@1
        name: azureconfig
        displayName: 'Download azureconfig file'
        inputs:
          secureFile: 'azureconfig.json'
      - script: |
          gpg --import $(key.secureFilePath)
          mkdir -p ~/.m2
          cp -v $(settingsSecurityXml.secureFilePath) ~/.m2/
          cp -v $(settingsXml.secureFilePath) ~/.m2/
          cp -v $(azureconfig.secureFilePAth) $(Build.SourcesDirectory)/src/test/resources/
      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'clean package verify'
          options: '-DperformRelease=true'
      - script: |
          ls -al $(Build.SourcesDirectory)
          ls -al $(Build.ArtifactStagingDirectory)
    - job: deploy_snapshot
      dependsOn: package
      condition: ne(variables['isGitHubTag'], 'true')
      pool:
        vmImage: 'ubuntu-16.04'
      steps:
      - checkout: none
      - script: |
          ls -al $(Build.SourcesDirectory)



